
system_info()
{
echo -e "\e[00;34m#########################################################\e[00m" 
echo -e "\e[00;34m#################### System Info ########################\\e[00m" 
echo -e "\e[00;34m#########################################################\e[00m" 
dddd=`uname -r 2>/dev/null`
if [ "$dddd" ]; then
  echo -e "\e[00;31mKernel :\e[00m $dddd"
  echo -e "\e[00;34m#########################################################\e[00m"  
else 
  :
fi
hostn=`uname -n 2>/dev/null`
if [ "$hostnamed" ]; then
  echo -e "\e[00;31mHostname:\e[00m $hostn" 
  echo -e "\e[00;34m#########################################################\e[00m" 
else 
  :
fi
arc=`uname -m 2>/dev/null`
if [ "$arc" ]; then
  echo -e "\e[00;31mLinux kernel architecture:\e[00m $arc" 
  echo -e "\e[00;34m#########################################################\e[00m" 
else 
  :
fi
shaee=`cat /etc/shells |grep "bin"|cut -d "/" -f3 2>/dev/null \n`
if [ "$shaee" ]; then
  echo -e "\e[00;31mShells On The System:\e[00m\n$shaee"
  echo -e "\e[00;34m#########################################################\e[00m" 
else 
  :
fi
unameinfo=`uname -a 2>/dev/null`
if [ "$unameinfo" ]; then
  echo -e "\e[00;31mFull Kernel information:\e[00m\n$unameinfo"
  echo -e "\e[00;34m#########################################################\e[00m" 
else 
  :
fi
des1=`cat /etc/redhat-release 2>/dev/null`
if [ "$des1" ]; then
  echo -e "\e[00;31mDistribution information:\e[00m\n$des1"
  echo -e "\e[00;34m#########################################################\e[00m" 
else 
  :
fi
des2=`cat /etc/lsb-release |grep "DISTRIB_DESCRIPTION"|cut -d "=" -f2 2>/dev/null`
if [ "$des2" ]; then
  echo -e "\e[00;31mDistribution information:\e[00m\n$des2"
  echo -e "\e[00;34m#########################################################\e[00m" 
else 
  :
fi
  echo -e "\e[00;31mMore About Kernel:\e[00m"
  printf "  GCC stack protector support:            "
  if $kconfig | grep -qi 'CONFIG_CC_STACKPROTECTOR=y'; then
    printf "\033[32mEnabled\033[m\n"
  else
    printf "\033[31mDisabled\033[m\n"
  fi

  printf "  Strict user copy checks:                "
  if $kconfig | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then
    printf "\033[32mEnabled\033[m\n"
  else
    printf "\033[31mDisabled\033[m\n"
  fi

  printf "  Enforce read-only kernel data:          "
  if $kconfig | grep -qi 'CONFIG_DEBUG_RODATA=y'; then
    printf "\033[32mEnabled\033[m\n"
  else
    printf "\033[31mDisabled\033[m\n"
  fi
  printf "  Restrict /dev/mem access:               "
  if $kconfig | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then
    printf "\033[32mEnabled\033[m\n"
  else
    printf "\033[31mDisabled\033[m\n"
  fi

  printf "  Restrict /dev/kmem access:              "
  if $kconfig | grep -qi 'CONFIG_DEVKMEM=y'; then
    printf "\033[31mDisabled\033[m\n"
  else
    printf "\033[32mEnabled\033[m\n"
  fi
  echo -e "\e[00;34m#########################################################\e[00m" 
  echo -e "\e[00;31mProgramming Langage in the system:\e[00m" 
  for programmin_lang in "${progr_dev[@]}"; do
        pss=`$programmin_lang |cut -d"/" -f4`
        if [ "$pss" ]; then
            echo -e "$pss"
        fi
  done
  echo -e "\e[00;34m#########################################################\e[00m" 
  envinfo=`env 2>/dev/null | grep -v 'LS_COLORS' 2>/dev/null`
  if [ "$envinfo" ]; then
    echo -e "\e[00;31mEnvironment information:\e[00m" 
    echo -e "\e[00;34m#########################################################\e[00m" 
    echo "$envinfo" > Reports/Environment.txt
    echo -e "Check Environment.txt" 
  else 
    :
  fi
  echo -e "\e[00;34m#########################################################\e[00m" 
  echo -e "\e[00;31mPath information:\e[00m" 
  echo "$PATH" > Reports/Path.txt
  echo -e "Check PATH.txt" 
}

checkCow()
{
      echo -e "\e[00;34m#########################################################\e[00m" 
    for tested_kernel in "${VULNERABLE_VERSIONS[@]}"; do
        if [[ "$dddd" == *"$tested_kernel"* ]]; then
            vulnerable_kernel=${dddd}
            break
        fi
    done
        echo -e "\e[00;31mChecking DirtyCoW Exploit :\e[00m" 

    if [[ "$vulnerable_kernel" ]]; then
        echo -e "MoW You Are Need A Cow !! "
    else
        echo -e "No Cow Here !"
    fi

}

passwords_gar(){
                          echo -e "\e[00;34m#########################################################\e[00m" 

                      echo -e "\e[00;31m################# Passwords Lookup ######################\e[00m" 
                      echo -e "\e[00;34m#########################################################\e[00m" 
                      echo -e "\e[00;34m#########################################################\e[00m" 

umaskdef=`grep -i "^UMASK" /etc/login.defs 2>/dev/null`
logindefs=`grep "^PASS_MAX_DAYS\|^PASS_MIN_DAYS\|^PASS_WARN_AGE\|^ENCRYPT_METHOD" /etc/login.defs 2>/dev/null`
lolzz=`grep -r -E -l -i -s 'pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd=|password=|pass:|user:|username:|password:|login:|pass |user ' /etc/ > passwordfiles.txt 2>/dev/null`
    for passwordfile in "${file_ex_password[@]}"; do
      ss=`find . -name "$passwordfile" -print0 2>/dev/null | xargs -0 grep -i -n "password" > Reports/passwords.txt 2>/dev/null`
    done
    for bash_command in "${bash_his[@]}"; do
      findinhis=`cat ~/.bash_history |grep --text "$bash_command" 2>/dev/null |sort -u `
      findoth1=`cat ~/.nano_history 2>/dev/null |grep --text "$bash_command" 2>/dev/null |sort -u `
      findoth2="`cat ~/.mysql_history 2>/dev/null |grep --text "$bash_command" 2>/dev/null |sort -u `"
      findoth3=`cat ~/.php_history 2>/dev/null |grep --text "$bash_command" 2>/dev/null |sort -u `
      if [ "$findinhis" ] || [ "$findoth1" ] || [ "$findoth2" ] || [ "$findoth3" ]; then

        echo -e "\e[00;31mIntersting Info !:\e[00m \n $findinhis $findoth1 $findoth2 $findoth3 $findoth4"
                      echo -e "\e[00;34m#########################################################\e[00m" 

      fi
    done
if [ "$umaskdef" ]; then

  echo -e "\e[00;31mumask value as specified in /etc/login.defs:\e[00m\n$umaskdef" 
fi
if [ "$logindefs" ]; then
                          echo -e "\e[00;34m#########################################################\e[00m" 

  echo -e "\e[00;31mPassword and storage information:\e[00m\n$logindefs" 
fi
                      echo -e "\e[00;34m#########################################################\e[00m" 

echo -e "\e[00;31mPossible Passwords in Files:\e[00m" 
echo -e "Check Passwords.txt File For Possible Scripts Have A Passwords"
                      echo -e "\e[00;34m#########################################################\e[00m" 

echo -e "\e[00;31mFiles Maybe Cabiton Passwords (configs):\e[00m" 
echo -e "Check passwordfiles.txt"
                      echo -e "\e[00;34m#########################################################\e[00m" 

}
check_ssh(){
  permitrootlogin=`grep "^PermitRootLogin" /etc/ssh/sshd_config 2>/dev/null`
  if [[ $permitrootlogin == "PermitRootLogin no" ]] || [[ $permitrootlogin == "PermitRootLogin prohibit-password" ]] ; then 
echo -e "\e[00;31m There No SSH With Root :( \e[00m" 
                      echo -e "\e[00;34m#########################################################\e[00m" 

  else
echo -e "\e[00;31m There Are SSH With Root :) \e[00m" 
                      echo -e "\e[00;34m#########################################################\e[00m" 

  fi
}

files_inter(){
  root_dir=`ls -ahlR /root/ 2>/dev/null`
  home_dir=`ls -ahlR /home/ 2>/dev/null`
  for priv_key in "${priv_keys[@]}"; do
    ss=`cat "$priv_key" 2>/dev/null`
    if [[ "$ss" ]]; then
        echo -e "\e[00;31m We Found Some RSA Keys :) \e[00m" 
      echo -e " $ss "
                      echo -e "\e[00;34m#########################################################\e[00m" 
    fi
  done
  if [[ "$root_dir" ]]; then
        echo -e "Root Directory Is Readple"
  fi
  if [[ "$home_dir" ]]; then
      echo -e "$home_dir" > Reports/Home_Dir.txt
  fi
    for interfile in "${file_interss[@]}"; do
      inter_check=`ls -alh "$interfile" 2>/dev/null`
      if [[ "$inter_check" ]]; then
          echo "$interfile" > Reports/Var_Directory.txt
      fi
    done

      echo -e "Root Directory Discovering .."
                            echo -e "\e[00;34m#########################################################\e[00m" 

      echo -e "Home Directory Discovering .."
      echo -e "Check Home_Dir.txt"
                            echo -e "\e[00;34m#########################################################\e[00m" 

      echo -e "Discovering Var Directory ..."
      echo -e "Check Var_Directory.txt"

    for var_log in "${logs_files[@]}"; do
      var_logs=`cat "$var_log" 2>/dev/null`
      if [[ "$var_logs" ]]; then
          echo "$var_logs" > Reports/logs_var.txt
      fi
    done
                          echo -e "\e[00;34m#########################################################\e[00m" 

              echo -e "Discovering Logs  ..."
              echo -e "Check Logs_var.txt"

}

users_group(){


echo -e "\e[00;34m#################### Users Info #########################\e[00m" 
echo -e "\e[00;34m#########################################################\e[00m" 
echo -e "\e[00;34m#########################################################\e[00m" 
    usr_name=`cat /etc/passwd | cut -d ":" -f 1 2>/dev/null`
    usr_uid=`cat /etc/passwd | cut -d ":" -f 3 2>/dev/null`
    usr_gid=`cat /etc/passwd | cut -d ":" -f 4 2>/dev/null`
    root_users=`grep -v -E "^#" /etc/passwd 2>/dev/null| awk -F: '$3 == 0 { print $1}' 2>/dev/null`
    if [[ "$usr_name" ]]; then
    echo -e "\e[00;31m Users List \e[00m" 
    echo -e "$usr_name"
    echo -e "\e[00;34m#########################################################\e[00m" 
    fi
    if [[ "$usr_uid" ]]; then
    echo -e "\e[00;31m UID List \e[00m" 
    echo -e "$usr_uid"
    echo -e "\e[00;34m#########################################################\e[00m" 
    fi
    if [[ "$usr_gid" ]]; then
    echo -e "\e[00;31m GID List \e[00m" 
    echo -e "$usr_gid"
    echo -e "\e[00;34m#########################################################\e[00m" 
    fi
    if [[ "$root_users" ]]; then
    echo -e "\e[00;31m Root List \e[00m" 
    echo -e "$root_users"
    echo -e "\e[00;34m#########################################################\e[00m" 
    fi
}

job_info()
{
alljobs=`ls -la /etc/cron* 2>/dev/null`
yourcorn=`crontab -l -u `whoami` 2>/dev/null`
cornprm=`find /etc/cron* -perm -0002 -type f -exec ls -la {} \; -exec cat {} 2>/dev/null \;`
contabscontent=`cat /etc/crontab 2>/dev/null`
tolookup=`ls -la /var/spool/cron/crontabs 2>/dev/null`
usersforcon=`cut -d ":" -f 1 /etc/passwd | xargs -n1 crontab -l -u 2>/dev/null`
checkothercorn=`ls -aRl /etc/cron* | awk '$1 ~ /w.$/' 2>/dev/null`

    if [[ "$alljobs" ]]; then
    echo -e "\e[00;31m Cron Jobs List \e[00m" 
    echo -e "$alljobs"
    echo -e "\e[00;34m#########################################################\e[00m" 
    fi
    if [[ "$yourcorn" ]]; then
    echo -e "\e[00;31m Own Crontab List \e[00m" 
    echo -e "$yourcorn"
    echo -e "\e[00;34m#########################################################\e[00m" 
    fi
    if [[ "$cornprm" ]]; then
    echo -e "\e[00;31m Cron Promotions \e[00m" 
    echo -e "$cornprm"
    echo -e "\e[00;34m#########################################################\e[00m" 
    fi
    if [[ "$contabscontent" ]]; then
    echo -e "\e[00;31m Cron Jobs Content \e[00m" 
    echo -e "$contabscontent"
    echo -e "\e[00;34m#########################################################\e[00m" 
    fi
    if [[ "$tolookup" ]]; then
    echo -e "\e[00;31m Spool Cron \e[00m" 
    echo -e "$tolookup"
    echo -e "\e[00;34m#########################################################\e[00m" 
    fi
    if [[ "$usersforcon" ]]; then
    echo -e "\e[00;31m Cron Users List \e[00m" 
    echo -e "$usersforcon"
    echo -e "\e[00;34m#########################################################\e[00m" 
    fi
    if [[ "$checkothercorn" ]]; then
    echo -e "\e[00;31m Cron Writable Cron \e[00m" 
    echo -e "$checkothercorn"
    echo -e "\e[00;34m#########################################################\e[00m" 
    fi
}

network_info(){
echo -e "\e[00;34m#################### Network Info #######################\e[00m" 
echo -e "\e[00;34m#########################################################\e[00m" 
echo -e "\e[00;34m#########################################################\e[00m" 
machine_ip=`ifconfig |grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"|sed -n 1p 2>/dev/null`
arpips=`arp -a |grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" 2>/dev/null`
getwwayip=`grep "nameserver" /etc/resolv.conf | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" 2>/dev/null`
tcpconnectinos=`netstat -an |grep tcp 2>/dev/null`

if [[ "$machine_ip" ]]; then
    echo -e "Internal IP : \n$machine_ip"
    echo -e "\e[00;34m#########################################################\e[00m" 

fi
if [[ "$arpips" ]]; then
    echo -e "ARP IPs :\n$arpips"
    echo -e "\e[00;34m#########################################################\e[00m" 
fi
if [[ "$getwwayip" ]]; then
    echo -e " Getway IPs : $getwwayip"
    echo -e "\e[00;34m#########################################################\e[00m" 
fi
if [[ "$tcpconnectinos" ]]; then
    echo -e "TCP Connections : \n$tcpconnectinos"
    echo -e "\e[00;34m#########################################################\e[00m" 
fi
}

all_f(){
header
system_info 
checkCow 
passwords_gar 
check_ssh  
files_inter
network_info
users_group
job_info
}

all_f
